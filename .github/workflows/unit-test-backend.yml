name: Tabiya Compass Unit Tests
on:
  workflow_call:
    inputs:
      target-environment:
        required: true
        type: string
      application-database-name:
        required: true
        type: string
      taxonomy-database-name:
        required: true
        type: string
      taxonomy-model-id:
        required: true
        type: string
      backend-url:
        required: true
        type: string
      frontend-url:
        required: true
        type: string
      vertex-api-region:
        required: true
        type: string
jobs:
  unit-test:
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-0
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Load cached Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
      - name: Install dependencies
        shell: bash
        run: |
          poetry lock --no-update --no-interaction
          poetry install --no-interaction
        working-directory: backend
      - name: Linting Bandit
        shell: bash
        run: poetry run bandit -c bandit.yaml -r .
        working-directory: backend
      - name: Linting Pylint
        shell: bash
        # Do not fail the build if there are linting errors (--exit-zero)
        # Once we have fixed all the linting errors, we can remove this flag
        run: poetry run pylint --exit-zero --recursive=y .
        working-directory: backend
      - name: Setup google-cloud-auth
        uses: google-github-actions/auth@v2.1.2
        with:
          credentials_json:
            ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
      - name: Run unit tests
        shell: bash
        run: poetry run pytest -m 'not (evaluation_test or smoke_test)'
        working-directory: backend
        env:
          TAXONOMY_MONGODB_URI: ${{ secrets.TAXONOMY_MONGODB_URI }}
          TAXONOMY_DATABASE_NAME: ${{ inputs.taxonomy-database-name }}
          TAXONOMY_MODEL_ID: ${{ inputs.taxonomy-model-id}}
          APPLICATION_MONGODB_URI: ${{ secrets.APPLICATION_MONGODB_URI }}
          APPLICATION_DATABASE_NAME: ${{ inputs.application-database-name }}
          TARGET_ENVIRONMENT: ${{ inputs.target-environment }}
          VERTEX_API_REGION: ${{ inputs.vertex-api-region }}
          BACKEND_URL: ${{ inputs.backend-url }}
          FRONTEND_URL: ${{ inputs.frontend-url }}
          ENABLE_SENTRY: "False" # Disable Sentry for unit tests on the pipeline, since tests break with sentry init
