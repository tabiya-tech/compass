from enum import Enum
from typing import Optional
from datetime import datetime, timezone

from pydantic import BaseModel


class AgentType(Enum):
    """
    An enumeration for agent types
    """
    WELCOME_AGENT = "WelcomeAgent"
    EXPLORE_EXPERIENCES_AGENT = "ExploreExperiencesAgentDirector"
    COLLECT_EXPERIENCES_AGENT = "CollectExperiencesAgent"
    INFER_OCCUPATIONS_AGENT = "InferOccupationsAgent"
    EXPLORE_SKILLS_AGENT = "ExploreSkillsAgent"
    FAREWELL_AGENT = "FarewellAgent"
    QNA_AGENT = "QnaAgent"


class AgentInput(BaseModel):
    """
    The input to an agent
    """

    message: str  # Bad idea, rename
    """The message from the user"""

    is_artificial: Optional[bool] = False
    """
    Whether the message is artificial or not.
    Artificial messages are generated by the system impersonating the user. They are used to guide the conversation and should not be shown to the user.
    """
    sent_at: datetime = datetime.now(timezone.utc)
    """The sent_at of the message"""

    class Config:
        extra = "forbid"


class LLMStats(BaseModel):
    """
    The stats for an LLM call
    """
    error: str = ""
    """The error message if there was an error"""

    prompt_token_count: int
    """The number of tokens in the prompt sent to the LLM"""

    response_token_count: int
    """The number of tokens in the response generated by the LLM"""

    response_time_in_sec: float
    """The time it took to generate the response, it may include multiple retries"""

    class Config:
        extra = "forbid"


class AgentOutput(BaseModel):
    """
    The output of an agent
    """
    message_for_user: str
    """The message for the user"""

    finished: bool
    """Whether the the agent has finished its task"""

    agent_type: Optional[AgentType] = None
    """The type of the agent that produced the response"""

    agent_response_time_in_sec: float
    """The total time it took the agent to produce a response. It may include multiple calls to LLMs or tools"""

    llm_stats: list[LLMStats]
    """The stats for each call to an LLM that was used to generate the response"""

    sent_at: datetime = datetime.now(timezone.utc)
    """The sent_at of the message"""

    class Config:
        extra = "forbid"


class AgentOutputWithReasoning(AgentOutput):
    """
    The output of an agent with reasoning
    """
    reasoning: str
    """Chain of Thought reasoning behind the response of the LLM"""

    class Config:
        extra = "forbid"
